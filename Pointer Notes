Comprehensive Guide to Pointers in C++
1. Basics of Pointers

A pointer is a variable that stores the memory address of another variable.

int x = 10;
int* ptr = &x;  // Pointer stores the address of x

    &x gives the address of x.
    ptr holds this address.
    *ptr dereferences the pointer (accesses the value at the address).

2. Pointer Declaration and Initialization

Pointers must be declared with the * operator and must match the type they point to.

int* ptr1;    // Pointer to an int
double* ptr2; // Pointer to a double
char* ptr3;   // Pointer to a char

Pointer Initialization

int a = 42;
int* p1 = &a;  // Correct: p1 points to a
int* p2 = nullptr;  // Best practice: Initialize to nullptr

nullptr is preferred over NULL in modern C++.
3. Dereferencing Pointers

Using * before a pointer variable accesses the value it points to.

int a = 5;
int* p = &a;
std::cout << *p;  // Outputs 5
*p = 10;          // Modifies a to 10

4. Pointer Arithmetic

Pointers can be incremented, decremented, added, or subtracted.

int arr[] = {10, 20, 30, 40};
int* p = arr; // Points to arr[0]

p++;   // Moves to arr[1]
p--;   // Moves back to arr[0]

std::cout << *(p + 2);  // Outputs 30 (arr[2])

5. Pointers and Arrays

Arrays are implicitly convertible to pointers.

int arr[] = {1, 2, 3};
int* p = arr;  // p points to arr[0]

std::cout << p[1];  // Accesses arr[1] (2)

6. Dynamic Memory Allocation

Use new and delete for heap allocation.

int* p = new int(10);  // Allocates an int with value 10
delete p;              // Frees memory

int* arr = new int[5]; // Allocates an array of 5 ints
delete[] arr;          // Frees array memory

7. Passing Pointers to Functions
Pass by Address (Pointer)

void modify(int* p) {
    *p = 100;
}

int main() {
    int x = 10;
    modify(&x);
    std::cout << x;  // Outputs 100
}

Pointer to an Array

void printArray(int* arr, int size) {
    for (int i = 0; i < size; i++)
        std::cout << arr[i] << " ";
}

int main() {
    int nums[] = {1, 2, 3, 4};
    printArray(nums, 4);
}

8. Pointers to Pointers (Double Pointers)

A pointer to a pointer stores the address of another pointer.

int x = 5;
int* p = &x;
int** pp = &p;

std::cout << **pp;  // Outputs 5

9. Function Pointers

A function pointer stores the address of a function.

#include <iostream>

void hello() {
    std::cout << "Hello, world!";
}

int main() {
    void (*funcPtr)() = hello; // Function pointer
    funcPtr(); // Calls hello()
}

10. Smart Pointers (Modern C++)

Use std::unique_ptr and std::shared_ptr for automatic memory management.

#include <memory>

std::unique_ptr<int> uptr = std::make_unique<int>(10);
std::shared_ptr<int> sptr = std::make_shared<int>(20);

This covers everything you need to effectively work with pointers in C++. Would you like an example on a specific topic?
